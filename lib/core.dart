library modularity.core;import 'dart:collection' show HashMap;import 'dart:async' show Future, Completer;import 'dart:mirrors'; //TODO import just the required stuffimport 'package:connect/connect.dart';import 'package:route_hierarchical/client.dart';import 'package:class_loader/class_loader.dart';import 'manifest.dart';import 'utility/utility.dart' as utility;import 'data/data.dart';import 'exception/exception.dart';import 'annotation/module/module.dart' as annotations;import 'view/view.dart';part 'request.dart';part 'module.dart';part 'task.dart';part 'application.dart';part 'application_info.dart';part 'resource.dart';part 'page.dart';part 'fragment.dart';part 'navigator.dart';class Core {  Core() {  }  void tests() {    var module = new Module(        "modularity.core", "TestModule", null, {          "test": null        });    module.add(new NavigationEventArgs("testUri"));    module.onRequestCompleted(new RequestCompletedEventArgs("news", 200, null, isErrorOccurred: true));    module.onRequestCompleted(new RequestCompletedEventArgs("news", 200, null));    module.onRequestCompleted(new RequestCompletedEventArgs("lol", 200, null, isErrorOccurred: true));    module.onLoadingStateChanged(new LoadingStateChangedEventArgs(true));    module.onLoadingStateChanged(new LoadingStateChangedEventArgs(false));    module.remove();    var menu = new Module(      "modularity.core", "MenuModule", null, {          "initText": "That's an init text!"      }, null, new ApplicationContext(null)    );  }}@annotations.ApplicationModule("1.0.5")class MenuModule extends Mod {  String _title;  MenuModule(ModuleContext context) : super() {  }  void set title(String title) {    _title = title;    onPropertyChanged("title");  }  String get title => _title;  @annotations.OnBeforeAdd  void beforeAdd() {    print("before add");  }  @annotations.OnAdded  void added() {    print("added");  }  @annotations.OnBeforeRemove  void beforeRemove() {    print("before remove");  }  @annotations.OnRemoved  void removed() {    print("removed");  }}void main() {  new Core().tests();}