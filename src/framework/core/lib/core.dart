library lib.core;import 'dart:async';import 'dart:mirrors';import 'utility/utility.dart';import 'event/event.dart';part 'application.dart';part 'page.dart';part 'fragment.dart';part 'abstract_module.dart';part 'annotated_module.dart';part 'annotation/module_annotations.dart';part 'config.dart';part 'event_args/event_args.dart';part 'event_args/init_event_args.dart';part 'event_args/navigation_event_args.dart';part 'event_args/request_completed_event_args.dart';part 'exception/missing_navigation_parameter_exception.dart';part 'exception/missing_init_method_exception.dart';part 'exception/missing_module_name_exception.dart';part 'exception/invalid_module_exception.dart';class Core {  Core() {  }  void tests() {    var module = new AnnotatedModule.from(        TestModule,        "fragment_id", {          "test": null        });    module.add(false, null);    module.onRequestCompleted(new RequestCompletedEventArgs("news", 200, null, isErrorOccurred: true));    module.onRequestCompleted(new RequestCompletedEventArgs("news", 200, null));    module.onRequestCompleted(new RequestCompletedEventArgs("lol", 200, null, isErrorOccurred: true));    module.remove(false, null);  }}@Module("testModule2")class TestModule {  @OnInit  void init(InitEventArgs args) {    print("init");  }  @OnBeforeAdd  void beforeAdd(NavigationEventArgs args) {    print("before add");  }  @OnAdded  void added() {    print("added");  }  @OnBeforeRemove  void beforeRemove(NavigationEventArgs args) {    print("before remove");  }  @OnRemoved  void removed() {    print("removed");  }  @OnRequestCompleted()  void requestCompletedDefault(RequestCompletedEventArgs response) {    print("Request ${response.requestId} completed with error: ${response.isErrorOccurred}");  }  @OnRequestCompleted("lol", true)  void requestLolCompletedError(response) {    print("Request ${response.requestId} completed with error");  }  @OnRequestCompleted("news", true)  void requestNewsCompletedError(response) {    print("Request ${response.requestId} completed with error");  }  @OnRequestCompleted("news")  void requestNewsCompleted(response) {    print("Request ${response.requestId} completed without error");  }}void main() {  new Core().tests();}